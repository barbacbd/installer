package lbconfig

import (
	"fmt"
	"os"
	"path/filepath"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/pkg/asset"
)

var (
	ConfigName = "openshift-lbConfigForDNS.yaml"
	ConfigPath = filepath.Join("openshift", ConfigName)
)

// Config generates the lbConfigForDNS ConfigMap.
type Config struct {
	File *asset.File
}

var _ asset.WritableAsset = (*Config)(nil)

// Name returns a human friendly name for the asset.
func (*Config) Name() string {
	return "OpenShift Load Balancer Config"
}

// Dependencies returns all the dependencies directly needed to generate
// the asset.
func (*Config) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the openshift-install ConfigMap.
func (i *Config) Generate(dependencies asset.Parents) error {
	cm, err := CreateLBConfigMap("openshift-lbConfigForDNS", "", "", "")
	if err != nil {
		return err
	}

	i.File = &asset.File{
		Filename: ConfigPath,
		Data:     []byte(cm),
	}

	return nil
}

// Files returns the files generated by the asset.
func (i *Config) Files() []*asset.File {
	if i.File != nil {
		return []*asset.File{i.File}
	}
	return []*asset.File{}
}

// Load loads the already-rendered files back from disk.
func (i *Config) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(ConfigPath)
	if os.IsNotExist(err) {
		return false, nil
	} else if err != nil {
		return false, err
	}
	i.File = file
	return true, nil
}

// CreateLBConfigMap creates a ConfigMap containing API and APi-Int
// LB configuration. Returns an error if marshalling to YAML fails.
func CreateLBConfigMap(name, lbIntDns, lbDns, platform string) (string, error) {
	if lbIntDns == "" && lbDns == "" {
		return "", nil
	}

	if platform == "" {
		return "", nil
	}

	cm := &corev1.ConfigMap{
		TypeMeta: metav1.TypeMeta{
			APIVersion: corev1.SchemeGroupVersion.String(),
			Kind:       "ConfigMap",
		},
		ObjectMeta: metav1.ObjectMeta{
			Namespace: fmt.Sprintf("openshift-%s-infra", platform),
			Name:      name,
		},
		// The data below contains placeholders that will later be filled in after the ip addresses are known
		Data: map[string]string{
			"internal-api-lb-dns-name": lbIntDns,
			"external-api-lb-dns-name": lbDns,
		},
	}

	cmData, err := yaml.Marshal(cm)
	if err != nil {
		return "", fmt.Errorf("failed to create %q ConfigMap: %w", name, err)
	}

	return string(cmData), nil
}
